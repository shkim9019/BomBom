<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	<!-- mybatis -->	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
	   destroy-method="clearCache">
	   <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>	
		
	<!-- mybatis config파일 read : SqlSessionFactoryBean-->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="configLocation" value="classpath:mybatis-config.xml" />
	   <property name="mapperLocations" value="classpath:mappers/**/*.xml" />
	   <property name="dataSource"  ref="dataSource"/>
	</bean>
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- FileUpload: -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	   <property name="defaultEncoding" value="UTF-8" />
	   <!-- Upload Size: 1024*1024*50: "5242880‬0" -->
	   <property name="maxUploadSize"    value="603986800" />     
	   <property name="maxInMemorySize"  value="603986800" />
	</bean>
	
	
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- properties file read -->
	<context:property-placeholder
		location="classpath:/resources/config/database.properties"
	/>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${jdbc.driverClass}" />
	 	<property name="url" value="${jdbc.url}" />
	 	<property name="username" value="${jdbc.username}" />
	 	<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>	
	
	<!-- mail -->
	<!-- spring mail: id/pass -->
	<bean id="passwordAuth" class="javax.mail.PasswordAuthentication">
		<constructor-arg index="0">
			<value>wog20</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>a12341234!!</value>
		</constructor-arg>
	</bean>
	
	<!-- Authenticator -->
	<bean id="authenticator" class="javax.mail.Authenticator">
		<!--lookup-method는 주어진 메소드를 써주고  bean은 객체 반환 -->
		<lookup-method name="getPasswordAuthentication" bean="passwordAuth"/>
	</bean>
	
	<!-- Session -->
	<bean id="emailSession" class="javax.mail.Session">
		<constructor-arg>
			<props>
				<prop key="mail.smtp.host">${mail.smtp.host}</prop>
				<prop key="mail.smtp.port">${mail.smtp.port}</prop>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.ssl.enable">${mail.smtp.ssl.enable}</prop>
				<prop key="mail.smtp.ssl.trust">${mail.smtp.ssl.trust}</prop>
			</props>
		</constructor-arg>
		<constructor-arg ref="authenticator" />
	</bean>
	
	<!-- JavaMailSenderImpl -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="session" ref="emailSession" ></property>
	</bean>
	
	
	<!-- JDBC Transaction/Connection -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction Advice -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- get시작하는 method는 읽기전용(트랜잭션을 안먹이겠다) -->
			<tx:method name="do*" read-only="true" />
			<!-- 트랜잭션 대상 up-->
			<tx:method name="up*"  />
		</tx:attributes>
	</tx:advice>
	
	<!-- Transaction Advisor -->
	<aop:config>
		<aop:pointcut expression="execution(* com.sist.ehr..*Imple.up*(..))" id="serviceTxPointCut" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceTxPointCut" />
	</aop:config>
	
	
		
</beans>
